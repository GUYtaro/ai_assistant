# services/assistant.py
# -------------------------
# ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô "‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏≤‡∏á" (Service Layer) ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á:
# - STTClient (‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡∏Ñ‡πå ‚Üí ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
# - LLMClient (‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á LLM ‚Üí ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö)
# - TTSClient (‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Üí ‡∏û‡∏π‡∏î‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á)
# - ScreenReader (‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ‚Üí ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ LLM ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå)
# -------------------------

from core.llm_client import LLMClient
from core.stt_client import STTClient
from core.tts_client import TTSClient
from core.screen_reader import screenshot_data_uri

class AssistantService:
    def __init__(self, use_stt=True, use_tts=True, lang="th"):
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á Assistant Service ‡πÇ‡∏î‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏∏‡∏Å‡πÇ‡∏°‡∏î‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
        - use_stt: ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Speech-to-Text
        - use_tts: ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Text-to-Speech
        - lang: ‡∏†‡∏≤‡∏©‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö ("th" = ‡πÑ‡∏ó‡∏¢)
        """
        self.llm = LLMClient()                         # ‡∏™‡∏°‡∏≠‡∏á
        self.stt = STTClient(model_size="medium", language=lang) if use_stt else None   # ‡∏´‡∏π
        self.tts = TTSClient(lang=lang) if use_tts else None                           # ‡∏õ‡∏≤‡∏Å

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ (‡∏à‡∏≥‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢)
        self.history = [
            {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡πÅ‡∏•‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢"}
        ]

    # -------------------------
    # ‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (User ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤)
    # -------------------------
    def handle_text_query(self, user_text: str):
        """
        ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‚Üí ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á LLM ‚Üí ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        """
        if not user_text or not user_text.strip():
            return "[Assistant] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"

        # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á LLM
        reply = self.llm.ask(user_text, history=self.history)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
        self.history.append({"role": "user", "content": user_text})
        self.history.append({"role": "assistant", "content": reply})

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ‡πÅ‡∏•‡∏∞‡∏û‡∏π‡∏î‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ TTS)
        print(f"ü§ñ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢: {reply}")
        if self.tts:
            self.tts.speak(reply)

        return reply

    # -------------------------
    # ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á (User ‡∏û‡∏π‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤)
    # -------------------------
    def handle_voice_query(self, duration=5):
        """
        ‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡∏Ñ‡πå (x ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Üí ‡∏™‡πà‡∏á‡πÑ‡∏õ LLM ‚Üí ‡∏ï‡∏≠‡∏ö
        """
        if not self.stt:
            return "[Assistant] STT ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"

        print(f"üé§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á {duration} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ... ‡∏û‡∏π‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö")
        user_text = self.stt.listen_once(duration=duration)

        if not user_text or not user_text.strip():
            return "[Assistant] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"

        print(f"üìù ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤: {user_text}")
        return self.handle_text_query(user_text)

    # -------------------------
    # ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (Multimodal)
    # -------------------------
    def handle_screen_query(self, user_instruction="‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏™‡∏±‡πâ‡∏ô‡πÜ"):
        """
        ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ‚Üí ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û + ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡πÑ‡∏õ‡πÉ‡∏´‡πâ LLM ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‚Üí ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        """
        # 1) ‡∏ñ‡πà‡∏≤‡∏¢ screenshot ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô data URI
        data_uri, raw_bytes, img = screenshot_data_uri(resize_to=(1024, 768), fmt="JPEG", quality=80)

        # 2) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° prompt ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏†‡∏≤‡∏û
        prompt = user_instruction + "\n\n‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"

        # 3) ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á LLM
        reply = self.llm.ask_with_image(prompt, data_uri, history=self.history)

        # 4) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á history
        self.history.append({"role": "user", "content": user_instruction + " [SCREENSHOT]"})
        self.history.append({"role": "assistant", "content": reply})

        # 5) ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ‡πÅ‡∏•‡∏∞‡∏û‡∏π‡∏î‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ TTS)
        print("=== üñ•Ô∏è ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å LLM (ScreenReader) ===")
        print(reply)
        if self.tts:
            self.tts.speak(reply)

        return reply

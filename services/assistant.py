# services/assistant.py
# -------------------------
# ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô "‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏≤‡∏á" (Orchestrator) 
# ‡∏£‡∏ß‡∏° LLM (‡∏ñ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö) + STT (‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á) + TTS (‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á) + Actions (keyboard/mouse/screen reader)
# ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ class AssistantService ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
# -------------------------

from core.llm_client import LLMClient
from core.stt_client import STTClient
from core.tts_client import TTSClient
from core.keyboard_mouse import KeyboardMouse
from core.screen_reader import ScreenReader
from config import ACTION_REQUIRE_CONFIRM

class AssistantService:
    """
    AssistantService = ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏•‡∏±‡∏Å
    ‡∏£‡∏ß‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≤‡∏á ‡πÜ:
    - ‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (STT)
    - ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏î‡πâ‡∏ß‡∏¢ LLM
    - ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô Action Plan
    - ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (confirm) ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏≥
    - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏¥‡∏°‡∏û‡πå, ‡∏Ñ‡∏•‡∏¥‡∏Å, ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≠
    - ‡∏û‡∏π‡∏î‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö (TTS)
    """

    def __init__(self):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á instances ‡∏Ç‡∏≠‡∏á client/service ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
        self.llm = LLMClient()
        self.stt = STTClient(language="th")
        self.tts = TTSClient(lang="th")
        self.kb = KeyboardMouse()
        self.screen = ScreenReader()
        self.history = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ (list ‡∏Ç‡∏≠‡∏á dict)

    def listen_and_understand(self):
        """
        ‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡∏Ñ‡πå ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Üí ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á LLM
        """
        print("[Assistant] üé§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ü‡∏±‡∏á...")
        user_text = self.stt.listen_once(duration=5)
        if not user_text:
            return None

        # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô history
        self.history.append({"role": "user", "content": user_text})

        # ‡πÉ‡∏´‡πâ LLM ‡∏ï‡∏≠‡∏ö
        response = self.llm.ask(user_text, self.history)

        # ‡πÄ‡∏Å‡πá‡∏ö history
        self.history.append({"role": "assistant", "content": response})
        return response

    def execute_action(self, action: str):
        """
        ‡∏£‡∏±‡∏ô Action ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å LLM ‡πÄ‡∏ä‡πà‡∏ô:
        - type("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
        - press("enter")
        - click(x, y)
        - read_screen()
        """
        try:
            if action.startswith("type"):
                _, text = action.split(" ", 1)
                self.kb.type_text(text)
            elif action.startswith("press"):
                _, key = action.split(" ", 1)
                self.kb.press_key(key)
            elif action.startswith("click"):
                _, x, y = action.split(" ")
                self.kb.click(int(x), int(y))
            elif action.startswith("read_screen"):
                return self.screen.read_screen()
            else:
                print(f"[Assistant] ‚ùì ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å action: {action}")
        except Exception as e:
            print(f"[Assistant ERROR] ‡∏ó‡∏≥ action ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

    def respond(self, text: str):
        """
        ‡∏û‡∏π‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        """
        print(f"[Assistant] ü§ñ ‡∏û‡∏π‡∏î: {text}")
        self.tts.speak(text)

    def interactive_loop(self):
        """
        Loop ‡∏´‡∏•‡∏±‡∏Å:
        1. ‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        2. ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‚Üí ‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö + Action Plan
        3. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Action ‚Üí ‡∏Ç‡∏≠ confirm
        4. ‡∏ó‡∏≥ Action
        5. ‡∏û‡∏π‡∏î‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        """
        while True:
            response = self.listen_and_understand()
            if not response:
                continue

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LLM ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ action ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if "[ACTION]" in response:
                action = response.split("[ACTION]")[-1].strip()

                if ACTION_REQUIRE_CONFIRM:
                    confirm = input(f"[Assistant] ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏∞‡∏ó‡∏≥ action '{action}' ? (y/n): ")
                    if confirm.lower() != "y":
                        continue

                result = self.execute_action(action)
                if result:
                    self.respond(result)
            else:
                self.respond(response)

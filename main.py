# main.py
# -------------------------
# ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á AI Assistant (Enhanced Version)
# ‡πÄ‡∏û‡∏¥‡πà‡∏° SmartAppLauncher + Context Memory + Smart Search
# -------------------------

import re
from core.llm_client import LLMClient
from core.stt_client import STTClient
from core.tts_client import TTSClient
from core.vision_system import VisionSystem
from core.command_parser import CommandParser
from core.automation_executor import AutomationExecutor
from core.screen_capturer import screenshot_data_uri, screenshot_pil
from core.screen_reader import ScreenReader
from core.hotkey_listener import HotkeyListener
from core.app_launcher import AppLauncher
from core.smart_app_launcher import SmartAppLauncher  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° SmartAppLauncher


class AssistantContext:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Context Memory ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢"""
    def __init__(self):
        self.memory = {
            "last_opened_app": None,
            "recent_commands": [],
            "favorite_apps": {},
            "user_preferences": {
                "preferred_browser": "chrome",
                "language": "th"
            }
        }
        self.max_history = 10  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    
    def record_command(self, command: str, result: str):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        self.memory["recent_commands"].append({
            "command": command,
            "result": result,
            "timestamp": self._get_timestamp()
        })
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        if len(self.memory["recent_commands"]) > self.max_history:
            self.memory["recent_commands"].pop(0)
    
    def record_app_launch(self, app_name: str, success: bool):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô"""
        self.memory["last_opened_app"] = app_name
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö
        if app_name not in self.memory["favorite_apps"]:
            self.memory["favorite_apps"][app_name] = {
                "launch_count": 0,
                "success_count": 0
            }
        
        self.memory["favorite_apps"][app_name]["launch_count"] += 1
        if success:
            self.memory["favorite_apps"][app_name]["success_count"] += 1
    
    def get_smart_suggestion(self, partial_command: str) -> str:
        """‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"""
        partial_lower = partial_command.lower()
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        for cmd in reversed(self.memory["recent_commands"]):
            if partial_lower in cmd["command"].lower():
                return f"‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ: '{cmd['command']}' -> {cmd['result']}"
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö
        for app_name, stats in self.memory["favorite_apps"].items():
            if partial_lower in app_name.lower():
                success_rate = (stats["success_count"] / stats["launch_count"]) * 100
                return f"‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡∏¥‡∏î '{app_name}' {stats['launch_count']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {success_rate:.0f}%)"
        
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"
    
    def _get_timestamp(self) -> str:
        """‡πÑ‡∏î‡πâ timestamp ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        from datetime import datetime
        return datetime.now().strftime("%H:%M:%S")
    
    def get_context_summary(self) -> str:
        """‡∏™‡∏£‡∏∏‡∏õ context ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        summary = []
        if self.memory["last_opened_app"]:
            summary.append(f"‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {self.memory['last_opened_app']}")
        
        if self.memory["recent_commands"]:
            recent_count = len(self.memory["recent_commands"])
            summary.append(f"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {recent_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        if self.memory["favorite_apps"]:
            top_app = max(self.memory["favorite_apps"].items(), 
                         key=lambda x: x[1]["launch_count"], 
                         default=(None, None))
            if top_app[0]:
                summary.append(f"‡πÅ‡∏≠‡∏õ‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°: {top_app[0]}")
        
        return " | ".join(summary) if summary else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"


def main():
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    llm = LLMClient()
    stt = STTClient(model_size="medium", language="th")
    tts = TTSClient(lang="th")
    vision = VisionSystem()
    parser = CommandParser(llm_client=llm)
    executor = AutomationExecutor(monitor=1)
    launcher = AppLauncher()
    smart_launcher = SmartAppLauncher() # ‚úÖ ‡πÉ‡∏ä‡πâ SmartAppLauncher
    context = AssistantContext()  # ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö Context Memory

    chat_history = [{"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£"}]

    print("=========================================================")
    print("=== ü§ñ AI Assistant (Enhanced with Smart Features) ===")
    print("=========================================================")
    print("‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter")
    print("‡πÇ‡∏´‡∏°‡∏î Vision: ‡∏û‡∏¥‡∏°‡∏û‡πå 'vision:1 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°...'")
    print("‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ‡∏Å‡∏î F4 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏π‡∏î")
    print("‡πÇ‡∏´‡∏°‡∏î Automation: ‡∏û‡∏π‡∏î‡πÄ‡∏ä‡πà‡∏ô '‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° File' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏û‡∏¥‡∏°‡∏û‡πå hello world'")
    print("üß† ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà: Smart App Search + Context Memory")
    print("‡∏û‡∏¥‡∏°‡∏û‡πå exit/quit/q ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å\n")

    def smart_app_launch(app_name: str, url: str = None) -> dict:
        """
        ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
        ‡πÉ‡∏ä‡πâ SmartAppLauncher ‡∏Å‡πà‡∏≠‡∏ô ‚Üí Fallback ‡πÑ‡∏õ‡∏ó‡∏µ‡πà AppLauncher
        """
        print(f"üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î '{app_name}' ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞...")
        
        # 1. ‡πÉ‡∏ä‡πâ SmartAppLauncher ‡∏Å‡πà‡∏≠‡∏ô (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
        result = smart_launcher.launch(app_name)
        
        # 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏°‡∏µ URL ‚Üí ‡πÉ‡∏ä‡πâ AppLauncher ‡πÄ‡∏õ‡∏¥‡∏î URL
        if not result["ok"] and url:
            print(f"[Smart Fallback] ‡πÉ‡∏ä‡πâ AppLauncher ‡πÄ‡∏õ‡∏¥‡∏î URL...")
            result = launcher.open_url(url, app_name)
        
        # 3. ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡πÉ‡∏ä‡πâ AppLauncher ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        if not result["ok"] and not url:
            print(f"[Smart Fallback] ‡πÉ‡∏ä‡πâ AppLauncher ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...")
            result = launcher.launch(app_name)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á Context Memory
        context.record_app_launch(app_name, result["ok"])
        context.record_command(f"‡πÄ‡∏õ‡∏¥‡∏î {app_name}", 
                             "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" if result["ok"] else "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        
        return result

    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö F4
    def handle_voice():
        try:
            print("üé§ [F4] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ... ‡∏û‡∏π‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö")
            tts.speak("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")
            user_input = stt.listen_once(duration=5)
            if not user_input or user_input.strip() == "":
                print("[STT] ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
                tts.speak("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô")
                return

            print(f"üìù ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤: {user_input}")
            
            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Context Memory ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            context_suggestion = context.get_smart_suggestion(user_input)
            if "‡πÄ‡∏Ñ‡∏¢" in context_suggestion:
                print(f"üß† [Context] {context_suggestion}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if any(word in user_input.lower() for word in ["‡πÄ‡∏õ‡∏¥‡∏î", "open", "launch", "start"]):
                # ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
                app_name, url = _parse_open_command(user_input)
                if app_name:
                    result = smart_app_launch(app_name, url)  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
                    if result["ok"]:
                        tts.speak(f"‡πÄ‡∏õ‡∏¥‡∏î {app_name} ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")
                    else:
                        tts.speak("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
                    return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Automation ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if any(word in user_input.lower() for word in ["‡∏Ñ‡∏•‡∏¥‡∏Å", "‡∏û‡∏¥‡∏°‡∏û‡πå", "‡∏Å‡∏î", "‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô"]):
                print("‚öôÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Automation...")
                ok, parsed = parser.parse(user_input)
                if ok:
                    result = executor.execute(parsed)
                    context.record_command(user_input, 
                                         "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" if result.get("ok") else "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                    if result.get("ok"):
                        tts.speak("‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö")
                    else:
                        tts.speak("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ó‡∏≥‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    tts.speak("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö context
            if any(word in user_input.lower() for word in ["‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥", "history", "‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß", "‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"]):
                summary = context.get_context_summary()
                print(f"üß† [Context Summary] {summary}")
                tts.speak(f"‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {summary}")
                return
            
            # ‡πÅ‡∏ä‡∏ó‡∏õ‡∏Å‡∏ï‡∏¥
            reply_text = llm.ask(user_input, history=chat_history)
            chat_history.append({"role": "user", "content": user_input})
            chat_history.append({"role": "assistant", "content": reply_text})
            context.record_command(user_input, "‡πÅ‡∏ä‡∏ó‡∏õ‡∏Å‡∏ï‡∏¥")
            print(f"ü§ñ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢: {reply_text}")
            tts.speak(reply_text)

        except Exception as e:
            print(f"[ERROR] {e}")
            tts.speak("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Hotkey
    hotkey_listener = HotkeyListener(
        callback_start=handle_voice,
        hotkey="f4",
        cooldown=2.0
    )
    hotkey_listener.start()

    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ï‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
    def _parse_open_command(text):
        """‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏•‡∏∞ URL ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        text_lower = text.lower()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö URL (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°)
        url = None
        if "youtube" in text_lower:
            url = "https://youtube.com"
        elif "google" in text_lower and "search" not in text_lower and "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" not in text_lower:
            url = "https://google.com"
        elif "facebook" in text_lower:
            url = "https://facebook.com"
        elif "github" in text_lower:
            url = "https://github.com"
        elif "chatgpt" in text_lower or "chat gpt" in text_lower:
            url = "https://chat.openai.com"
        elif "claude" in text_lower:
            url = "https://claude.ai"
        elif "gemini" in text_lower or "bard" in text_lower:
            url = "https://gemini.google.com"
        elif "twitter" in text_lower or "x.com" in text_lower:
            url = "https://x.com"
        elif "instagram" in text_lower:
            url = "https://instagram.com"
        elif "netflix" in text_lower:
            url = "https://netflix.com"
        elif "spotify" in text_lower:
            url = "https://open.spotify.com"
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Google
        if ("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" in text_lower or "search" in text_lower) and not url:
            # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
            query = text_lower.replace("‡πÄ‡∏õ‡∏¥‡∏î", "").replace("open", "")
            query = query.replace("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", "").replace("search", "")
            query = query.replace("chrome", "").replace("firefox", "").replace("edge", "")
            query = query.replace("‡∏ú‡πà‡∏≤‡∏ô", "").replace("‡πÉ‡∏ô", "")
            query = query.strip()
            if query:
                import urllib.parse
                url = f"https://www.google.com/search?q={urllib.parse.quote(query)}"
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô)
        if "chrome" in text_lower or ("youtube" in text_lower or "google" in text_lower or "facebook" in text_lower or url):
            return "chrome", url
        elif "firefox" in text_lower:
            return "firefox", url
        elif "edge" in text_lower:
            return "edge", url
        elif "notepad" in text_lower or "‡πÇ‡∏ô‡πâ‡∏ï‡πÅ‡∏û‡∏î" in text_lower:
            return "notepad", None
        elif "calculator" in text_lower or "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏¥‡∏î‡πÄ‡∏•‡∏Ç" in text_lower or "‡πÅ‡∏Ñ‡∏•‡∏Ñ‡∏π‡πÄ‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå" in text_lower:
            return "calculator", None
        elif "paint" in text_lower or "‡πÄ‡∏û‡πâ‡∏ô‡∏ó‡πå" in text_lower:
            return "paint", None
        elif "cmd" in text_lower or "command" in text_lower or "‡∏Ñ‡∏≠‡∏°‡∏°‡∏≤‡∏ô‡∏î‡πå" in text_lower:
            return "cmd", None
        elif "powershell" in text_lower or "‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏ä‡∏•" in text_lower:
            return "powershell", None
        elif "explorer" in text_lower or "‡πÄ‡∏≠‡πá‡∏Å‡∏ã‡πå‡∏û‡∏•‡∏≠‡πÄ‡∏£‡∏≠‡∏£‡πå" in text_lower or "file explorer" in text_lower:
            return "explorer", None
        elif "line" in text_lower:
            return "line", None
        elif "discord" in text_lower:
            return "discord", None
        elif "vscode" in text_lower or "visual studio code" in text_lower:
            return "vscode", None
        elif "steam" in text_lower:
            return "steam", None
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏ï‡πà‡∏°‡∏µ URL ‚Üí ‡πÉ‡∏ä‡πâ Chrome ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        if url:
            return "chrome", url
        
        return None, None

    # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏£‡∏±‡∏ö input
    while True:
        try:
            user_input = input("‡∏Ñ‡∏∏‡∏ì (‡∏û‡∏¥‡∏°‡∏û‡πå/vision/F4/context): ")

            # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
            if user_input.lower() in ["exit", "quit", "q"]:
                tts.speak("‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")
                break

            # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Context Summary
            if user_input.lower() in ["context", "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥", "history"]:
                summary = context.get_context_summary()
                print(f"üß† [Context Memory] {summary}")
                tts.speak(f"‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {summary}")
                continue

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞)
            if any(word in user_input.lower() for word in ["‡πÄ‡∏õ‡∏¥‡∏î", "open", "launch", "start"]):
                app_name, url = _parse_open_command(user_input)
                
                if app_name:
                    result = smart_app_launch(app_name, url)  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
                    if result["ok"]:
                        print(f"‚úÖ {result['message']}")
                        tts.speak(f"‡πÄ‡∏õ‡∏¥‡∏î {app_name} ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")
                    else:
                        print(f"‚ùå {result['message']}")
                        tts.speak("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ")
                else:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏î‡πâ")
                    tts.speak("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£")
                continue

            # Vision Mode (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
            if user_input.lower().startswith("vision"):
                match = re.match(r'vision:?(\d*)\s*(.*)', user_input, re.IGNORECASE)
                if match:
                    monitor_str = match.group(1)
                    vision_prompt = match.group(2).strip()
                    monitor = int(monitor_str) if monitor_str else 1
                    if not vision_prompt:
                        vision_prompt = "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ô‡∏µ‡πâ"

                    print(f"üì∏ ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≠‡∏ó‡∏µ‡πà {monitor}...")
                    try:
                        reply_text = vision.analyze(vision_prompt, monitor=monitor)
                        context.record_command(f"vision: {vision_prompt}", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û")
                        print(f"ü§ñ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ (Vision-{monitor}): {reply_text}")
                        tts.speak(reply_text)
                    except Exception as e:
                        print(f"‚ùå {e}")
                        tts.speak("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û")
                    continue

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Automation (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
            if any(word in user_input.lower() for word in ["‡∏Ñ‡∏•‡∏¥‡∏Å", "‡∏û‡∏¥‡∏°‡∏û‡πå", "‡∏Å‡∏î", "‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô", "‡∏õ‡∏∏‡πà‡∏°"]):
                print("‚öôÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Automation ‚Üí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...")
                
                # ‡∏î‡∏∂‡∏á OCR ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                ocr_text = None
                data_uri = None
                if any(w in user_input.lower() for w in ["‡∏õ‡∏∏‡πà‡∏°", "‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠", "‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô"]):
                    try:
                        sr = ScreenReader(lang="tha+eng")
                        img = screenshot_pil(monitor=1)
                        ocr_text = sr.read_text(monitor=1)
                        data_uri, _, _ = screenshot_data_uri(monitor=1, resize_to=(1200, 800))
                    except Exception as e:
                        print(f"[WARN] OCR/Vision ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°: {e}")

                ok, parsed = parser.parse(user_input, ocr_text=ocr_text, hint_image_data_uri=data_uri)
                if not ok:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ:", parsed)
                    tts.speak("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")
                    continue

                print(f"üìã Action: {parsed}")
                result = executor.execute(parsed)
                context.record_command(user_input, 
                                     "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" if result.get("ok") else "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                if result.get("ok"):
                    print("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", result.get("message"))
                    tts.speak("‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö")
                else:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", result.get("message"))
                    tts.speak("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ó‡∏≥‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                continue

            # ‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏õ‡∏Å‡∏ï‡∏¥
            if user_input.strip():
                reply_text = llm.ask(user_input, history=chat_history)
                chat_history.append({"role": "user", "content": user_input})
                chat_history.append({"role": "assistant", "content": reply_text})
                context.record_command(user_input, "‡πÅ‡∏ä‡∏ó‡∏õ‡∏Å‡∏ï‡∏¥")
                print(f"ü§ñ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢: {reply_text}")
                tts.speak(reply_text)

        except KeyboardInterrupt:
            print("\n[‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ]")
            break
        except Exception as e:
            print(f"[CRITICAL ERROR] {e}")
            print("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LM Studio ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà")
            break


if __name__ == "__main__":
    main()
# main.py
# -------------------------
# ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á AI Assistant
# - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏´‡∏°‡∏î: ‡πÅ‡∏ä‡∏ï, ‡πÄ‡∏™‡∏µ‡∏¢‡∏á, Vision, ‡πÅ‡∏•‡∏∞ Full Voice Automation
# -------------------------

import re
from core.llm_client import LLMClient
from core.stt_client import STTClient
from core.tts_client import TTSClient
from core.vision_system import VisionSystem
from core.command_parser import CommandParser
from core.automation_executor import AutomationExecutor
from core.screen_capturer import screenshot_data_uri, screenshot_pil
from core.screen_reader import ScreenReader

def main():
    # --------------------------
    # üîß ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    # --------------------------
    llm = LLMClient()
    stt = STTClient(model_size="medium", language="th")
    tts = TTSClient(lang="th")
    vision = VisionSystem()
    parser = CommandParser(llm_client=llm)
    executor = AutomationExecutor()

    chat_history = [{"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£"}]

    print("=========================================================")
    print("=== ü§ñ AI Assistant (Full Voice Automation Mode) ===")
    print("=========================================================")
    print("‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter")
    print("‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ‡∏Å‡∏î Enter ‡∏ß‡πà‡∏≤‡∏á ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏π‡∏î (‡∏≠‡∏±‡∏î 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
    print("‡πÇ‡∏´‡∏°‡∏î Vision: ‡∏û‡∏¥‡∏°‡∏û‡πå 'vision: ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°...' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠")
    print("‡πÇ‡∏´‡∏°‡∏î Voice Automation: ‡∏û‡∏π‡∏î‡πÄ‡∏ä‡πà‡∏ô '‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏û‡∏¥‡∏°‡∏û‡πå hello world'")
    print("‡∏û‡∏¥‡∏°‡∏û‡πå exit/quit/q ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å\n")

    while True:
        try:
            user_input = input("‡∏Ñ‡∏∏‡∏ì (‡∏û‡∏¥‡∏°‡∏û‡πå/Enter/vision): ")

            # 1Ô∏è‚É£ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
            if user_input.lower() in ["exit", "quit", "q"]:
                tts.speak("‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞")
                break

            # 2Ô∏è‚É£ Vision Mode
            if user_input.lower().startswith("vision"):
                match = re.match(r'vision:?(\d*)\s*(.*)', user_input, re.IGNORECASE)
                if match:
                    monitor_str = match.group(1)
                    vision_prompt = match.group(2).strip()
                    monitor = int(monitor_str) if monitor_str else 1
                    if not vision_prompt:
                        vision_prompt = "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"
                    print(f"üì∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≠‡∏ó‡∏µ‡πà {monitor} ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ LLM ...")
                    try:
                        reply_text = vision.analyze(vision_prompt, monitor=monitor)
                        print(f"ü§ñ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ (Vision-{monitor}): {reply_text}")
                        tts.speak(reply_text)
                    except Exception as e:
                        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Vision: {e}")
                        tts.speak("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û")
                    continue

            # 3Ô∏è‚É£ Voice Mode (Enter ‡πÄ‡∏õ‡∏•‡πà‡∏≤)
            if user_input.strip() == "":
                print("üé§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ... ‡∏û‡∏π‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö")
                user_input = stt.listen_once(duration=5)
                if not user_input:
                    print("[STT] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î")
                    continue
                print(f"üó£Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤: {user_input}")

            # 4Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Automation ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if any(word in user_input.lower() for word in ["‡∏Ñ‡∏•‡∏¥‡∏Å", "‡∏û‡∏¥‡∏°‡∏û‡πå", "‡∏Å‡∏î", "‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô", "‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠", "‡πÄ‡∏°‡∏≤‡∏™‡πå", "‡πÄ‡∏Ñ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå"]):
                print("‚öôÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Automation ‚Üí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...")
                ocr_text = None
                data_uri = None
                needs_vision = any(w in user_input.lower() for w in ["‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠", "‡∏õ‡∏∏‡πà‡∏°", "‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô", "window"])
                if needs_vision:
                    try:
                        data_uri, _, _ = screenshot_data_uri(monitor=1, resize_to=(1200,800))
                        sr = ScreenReader()
                        img = screenshot_pil(monitor=1, resize_to=(1200,800))
                        ocr_text = sr.read_text(img)
                    except Exception as e:
                        print(f"[WARN] OCR ‡∏´‡∏£‡∏∑‡∏≠ Vision ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")

                ok, parsed = parser.parse(user_input, ocr_text=ocr_text, hint_image_data_uri=data_uri)
                if not ok:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô action ‡πÑ‡∏î‡πâ:", parsed)
                    tts.speak("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏•‡∏≠‡∏á‡∏û‡∏π‡∏î‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞")
                    continue

                result = executor.execute(parsed)
                if result.get("ok"):
                    print("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", result.get("message"))
                    tts.speak("‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞")
                else:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", result.get("message"))
                    tts.speak("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                continue

            # 5Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Automation ‚Üí ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ LLM ‡∏õ‡∏Å‡∏ï‡∏¥
            reply_text = llm.ask(user_input, history=chat_history)
            chat_history.append({"role": "user", "content": user_input})
            chat_history.append({"role": "assistant", "content": reply_text})
            print(f"ü§ñ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢: {reply_text}")
            tts.speak(reply_text)

        except KeyboardInterrupt:
            print("\n[‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ]")
            break
        except Exception as e:
            print(f"[CRITICAL ERROR] {e}")
            print("üí° ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LM Studio Server ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô http://localhost:1234/")
            break


if __name__ == "__main__":
    main()

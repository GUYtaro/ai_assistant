# main.py
# -------------------------
# ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á AI Assistant
# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:
#   üó£Ô∏è ‡∏û‡∏π‡∏î-‡∏ü‡∏±‡∏á (F4 ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î)
#   üñºÔ∏è Vision Mode (‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠)
#   üí¨ ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ (‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
# -------------------------

from core.llm_client import LLMClient
from core.stt_client import STTClient
from core.tts_client import TTSClient
from core.vision_system import VisionSystem
from core.hotkey_listener import HotkeyListener
import re
import threading
import time


def main():
    # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Clients ---
    llm = LLMClient()
    stt = STTClient(model_size="medium", language="th")
    tts = TTSClient(lang="th")
    vision = VisionSystem()

    chat_history = [{"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£"}]

    print("=========================================================")
    print("=== ü§ñ AI Assistant (Offline Mode) ===")
    print("=========================================================")
    print("‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter")
    print("‡πÇ‡∏´‡∏°‡∏î Vision:")
    print("  - vision: ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°... (‡∏à‡∏±‡∏ö‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å)")
    print("  - vision:1 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°... (‡∏à‡∏±‡∏ö‡∏à‡∏≠‡∏ó‡∏µ‡πà 1)")
    print("  - vision:2 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°... (‡∏à‡∏±‡∏ö‡∏à‡∏≠‡∏ó‡∏µ‡πà 2)")
    print("  - vision:3 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°... (‡∏à‡∏±‡∏ö‡∏à‡∏≠‡∏ó‡∏µ‡πà 3)")
    print("‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Voice): ‡∏Å‡∏î F4 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏π‡∏î / F4 ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î")
    print("‡∏û‡∏¥‡∏°‡∏û‡πå exit/quit/q ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å\n")

    # --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏π‡∏î (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î F4) ---
    def handle_voice():
        try:
            print("üé§ [HOTKEY] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ... ‡∏û‡∏π‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö")
            tts.speak("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")  # ‚úÖ ‡∏ï‡∏≠‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Google Assistant
            user_input = stt.listen_once(duration=5)
            if not user_input or user_input.strip() == "":
                print("[STT] ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô")
                tts.speak("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö")
                return

            print(f"üìù ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤: {user_input}")
            reply_text = llm.ask(user_input, history=chat_history)

            chat_history.append({"role": "user", "content": user_input})
            chat_history.append({"role": "assistant", "content": reply_text})

            print(f"ü§ñ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢: {reply_text}")
            tts.speak(reply_text)

        except Exception as e:
            print(f"[ERROR] ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            tts.speak("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡∏ö")

    # --- ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î F4 ‡∏ã‡πâ‡∏≥ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î ---
    def handle_stop_voice():
        print("[Hotkey] üö´ ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        tts.speak("‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")

    # --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Hotkey ---
    hotkey_listener = HotkeyListener(
        callback_start=handle_voice,
        callback_stop=handle_stop_voice,
        hotkey="f4"
    )
    hotkey_listener.start()

    # --- ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏£‡∏±‡∏ö input ---
    while True:
        try:
            user_input = input("‡∏Ñ‡∏∏‡∏ì (‡∏û‡∏¥‡∏°‡∏û‡πå/vision/F4): ")

            # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
            if user_input.lower() in ["exit", "quit", "q"]:
                tts.speak("‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö")
                break

            # Vision Mode
            if user_input.lower().startswith("vision"):
                match = re.match(r'vision:?(\d*)\s*(.*)', user_input, re.IGNORECASE)
                if match:
                    monitor_str = match.group(1)
                    vision_prompt = match.group(2).strip()
                    monitor = int(monitor_str) if monitor_str else 1
                    if not vision_prompt:
                        vision_prompt = "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"

                    print(f"üì∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≠‡∏ó‡∏µ‡πà {monitor} ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ LLM ...")
                    try:
                        reply_text = vision.analyze(vision_prompt, monitor=monitor)
                        print(f"ü§ñ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ (Vision - ‡∏à‡∏≠‡∏ó‡∏µ‡πà {monitor}): {reply_text}")
                        tts.speak(reply_text)
                    except Exception as e:
                        error_msg = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≠‡∏ó‡∏µ‡πà {monitor}: {e}"
                        print(f"‚ùå {error_msg}")
                        tts.speak("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠")
                    continue

            # ‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå (‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)
            if user_input.strip():
                reply_text = llm.ask(user_input, history=chat_history)
                chat_history.append({"role": "user", "content": user_input})
                chat_history.append({"role": "assistant", "content": reply_text})

                print(f"ü§ñ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢: {reply_text}")
                tts.speak(reply_text)

        except KeyboardInterrupt:
            print("\n[‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ]")
            break
        except Exception as e:
            print(f"\n[CRITICAL ERROR] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: {e}")
            print("--- üí° ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LM Studio Server ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô http://localhost:1234/ ---")
            break


if __name__ == "__main__":
    main()

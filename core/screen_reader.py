# core/screen_reader.py
# -------------------------
# ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ OCR (‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠)
# -------------------------

import sys, os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))  # ‡πÉ‡∏´‡πâ‡πÄ‡∏à‡∏≠ config ‡πÅ‡∏•‡∏∞ core ‡∏≠‡∏∑‡πà‡∏ô‡πÜ

import pytesseract
from PIL import Image
from core.screen_capturer import screenshot_pil

class ScreenReader:
    def __init__(self, lang="eng", default_monitor=0, default_region=None):
        """
        ScreenReader: ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏î‡πâ‡∏ß‡∏¢ OCR
        - lang: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏†‡∏≤‡∏©‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Tesseract ‡πÄ‡∏ä‡πà‡∏ô "eng", "tha", ‡∏´‡∏£‡∏∑‡∏≠ "tha+eng"
        - default_monitor: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (0 = all, 1 = main, 2+ = ‡∏à‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ)
        - default_region: tuple (left, top, width, height) ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å fix ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà OCR
        """
        self.lang = lang
        self.default_monitor = default_monitor
        self.default_region = default_region

    def read_text(self, region=None, resize_to=None, monitor=None):
        """
        OCR ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        - region: (x,y,w,h) ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà OCR ‡∏ñ‡πâ‡∏≤ None ‡πÉ‡∏ä‡πâ default_region
        - resize_to: (w,h) ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏¢‡πà‡∏≠/‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô OCR
        - monitor: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏à‡∏±‡∏ö (override default_monitor)
        """
        monitor = monitor if monitor is not None else self.default_monitor
        region = region if region is not None else self.default_region

        # ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        img = screenshot_pil(region=region)

        # OCR
        text = pytesseract.image_to_string(img, lang=self.lang)
        return text.strip()

# ‚úÖ Test Mode
if __name__ == "__main__":
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡πà screenshot_data_uri (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ OCR)
    from . import screenshot_data_uri
    uri, _, _ = screenshot_data_uri()
    print("üì∏ ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    print("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á data URI:", uri[:60] + "...")
    
    # ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö OCR ‚Üí ‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Tesseract ‡∏Å‡πà‡∏≠‡∏ô
    # sr = ScreenReader(lang="tha+eng")
    # print("OCR Result:", sr.read_text())

# =============== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå ===============
import io
import base64

def screenshot_data_uri(resize_to=(1024, 768), fmt="JPEG", quality=80):
    """
    ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô data URI (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ LLM Vision)
    Returns:
        tuple: (data_uri: str, raw_bytes: bytes, pil_image: Image)
    """
    from core.screen_capturer import screenshot_pil
    
    # ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    img = screenshot_pil()
    
    # resize ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    if resize_to:
        from PIL import Image
        img = img.resize(resize_to, Image.LANCZOS)
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô bytes
    img_byte_arr = io.BytesIO()
    if fmt.upper() == "PNG":
        img.save(img_byte_arr, format="PNG")
    else:
        img.save(img_byte_arr, format="JPEG", quality=quality)
    img_bytes = img_byte_arr.getvalue()
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
    base64_str = base64.b64encode(img_bytes).decode('utf-8')
    mime_type = "image/jpeg" if fmt.upper() != "PNG" else "image/png"
    data_uri = f"data:{mime_type};base64,{base64_str}"
    
    return data_uri, img_bytes, img
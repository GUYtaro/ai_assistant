# ==========================================================
# core/automation_executor.py
# -------------------------
# ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà "‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Automation ‡∏à‡∏≤‡∏Å LLM (JSON)"
# ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ KeyboardMouseController ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô
# ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö:
#   - ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á (TTS/STT)
#   - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô (multi-step)
#   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (safety)
#   - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏¥‡∏Å, ‡∏û‡∏¥‡∏°‡∏û‡πå, ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°, ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô, ‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏°‡∏≤‡∏™‡πå
# ==========================================================

import time
from typing import Dict, Any

from core.keyboard_mouse_controller import KeyboardMouseController
from core.tts_client import TTSClient
from core.stt_client import STTClient


class AutomationExecutor:
    """
    ‡∏Ñ‡∏•‡∏≤‡∏™ AutomationExecutor
    -------------------------
    ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á LLM ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î/‡πÄ‡∏°‡∏≤‡∏™‡πå

    ‡πÄ‡∏ä‡πà‡∏ô action ‡∏à‡∏≤‡∏Å LLM ‡∏à‡∏∞‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:
    {
        "type": "click",
        "target": {"by": "text", "value": "‡∏ï‡∏Å‡∏•‡∏á"},
        "button": "left"
    }
    """

    def __init__(self, km_controller: KeyboardMouseController = None, monitor=1):
        # ‡πÉ‡∏ä‡πâ controller ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        self.km = km_controller or KeyboardMouseController(monitor=monitor)

        # ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        self.tts = TTSClient(lang="th")
        self.stt = STTClient(model_size="small", language="th")

    # ----------------------------------------------------------
    def _ask_confirm(self, prompt_text: str, timeout=6) -> bool:
        """
        üîí ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
        ‡πÉ‡∏ä‡πâ TTS ‡∏û‡∏π‡∏î‡∏ñ‡∏≤‡∏° ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ STT ‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤:
            True  ‚Üí ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏π‡∏î "‡πÉ‡∏ä‡πà / ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô / ‡πÇ‡∏≠‡πÄ‡∏Ñ"
            False ‚Üí ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏π‡∏î "‡πÑ‡∏°‡πà" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏≠‡∏ö
        """
        self.tts.speak(prompt_text + " ‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤ '‡πÉ‡∏ä‡πà' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ '‡πÑ‡∏°‡πà' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
        try:
            reply = self.stt.listen_once(duration=4)
            if not reply:
                return False
            r = reply.strip().lower()
            return any(w in r for w in ["‡πÉ‡∏ä‡πà", "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", "yes", "ok", "‡πÇ‡∏≠‡πÄ‡∏Ñ"])
        except Exception:
            return False

    # ----------------------------------------------------------
    def execute(self, action: Dict[str, Any]) -> Dict[str, Any]:
        """
        üß© ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á AutomationExecutor
        ‡∏£‡∏±‡∏ö action JSON ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á

        Parameters:
            action (dict): JSON ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å LLM ‡πÄ‡∏ä‡πà‡∏ô
                {
                    "type": "click",
                    "target": {"by": "text", "value": "‡∏ï‡∏Å‡∏•‡∏á"},
                    "button": "left"
                }

        Returns:
            dict: {"ok": bool, "message": str, "details": ...}
        """
        try:
            # ==========================
            # üîÅ Multi-step Automation
            # ==========================
            if action.get("type") == "multi":
                results = []
                for step in action.get("steps", []):
                    res = self.execute(step)
                    results.append(res)
                    if not res.get("ok", False):
                        return {"ok": False, "message": "step_failed", "details": results}
                return {"ok": True, "message": "multi_steps_done", "details": results}

            # ==========================
            # üîí ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ flag confirm ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô
            # ==========================
            if action.get("confirm", False):
                ok = self._ask_confirm("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏ó‡∏≥‡πÄ‡∏•‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
                if not ok:
                    return {"ok": False, "message": "cancelled_by_user"}

            # ==========================
            # ‚öôÔ∏è ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å
            # ==========================
            t = action.get("type")

            # ----------------------------------------------------------
            # üñ±Ô∏è CLICK ACTION
            # ----------------------------------------------------------
            if t == "click":
                target = action.get("target", {})
                x, y = None, None

                if target.get("by") == "coords":
                    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                    x, y = target["value"]

                elif target.get("by") == "text":
                    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å
                    element = self.km.detector.find_element_by_text(target["value"])
                    if not element:
                        return {"ok": False, "message": "target_not_found"}
                    x, y = self.km.detector.get_element_center(element)

                elif target.get("by") == "image":
                    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (template matching)
                    element = self.km.detector.find_element_by_image(target["value"])
                    if not element:
                        return {"ok": False, "message": "target_not_found"}
                    x, y = self.km.detector.get_element_center(element)

                else:
                    return {"ok": False, "message": "unknown_target_type"}

                # ‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å
                button = action.get("button", "left")
                self.km.mouse.click(x, y, button=button)
                time.sleep(0.2)
                return {"ok": True, "message": f"clicked {x},{y}"}

            # ----------------------------------------------------------
            # ‚å®Ô∏è TYPE ACTION
            # ----------------------------------------------------------
            elif t == "type":
                txt = action.get("content", "")
                target = action.get("target")

                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ target ‚Üí ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå
                if target:
                    if target["by"] == "coords":
                        x, y = target["value"]
                        self.km.mouse.click(x, y)
                    elif target["by"] == "text":
                        element = self.km.detector.find_element_by_text(target["value"])
                        if element:
                            x, y = self.km.detector.get_element_center(element)
                            self.km.mouse.click(x, y)
                    time.sleep(0.2)

                self.km.keyboard.type_text(txt)
                return {"ok": True, "message": f"typed {len(txt)} chars"}

            # ----------------------------------------------------------
            # üîò PRESS KEY ACTION
            # ----------------------------------------------------------
            elif t == "press":
                keys = action.get("keys", [])
                self.km.keyboard.press_keys(keys)
                return {"ok": True, "message": f"pressed {'+'.join(keys)}"}

            # ----------------------------------------------------------
            # üñ±Ô∏è SCROLL ACTION
            # ----------------------------------------------------------
            elif t == "scroll":
                amt = action.get("amount", 100)
                self.km.mouse.scroll(amt)
                return {"ok": True, "message": f"scrolled {amt}"}

            # ----------------------------------------------------------
            # üñ±Ô∏è MOVE ACTION
            # ----------------------------------------------------------
            elif t == "move":
                target = action.get("target")
                if target["by"] == "coords":
                    x, y = target["value"]
                elif target["by"] == "text":
                    element = self.km.detector.find_element_by_text(target["value"])
                    if not element:
                        return {"ok": False, "message": "target_not_found"}
                    x, y = self.km.detector.get_element_center(element)
                else:
                    return {"ok": False, "message": "unknown_target_type"}

                self.km.mouse.move_to(x, y)
                return {"ok": True, "message": f"moved to {x},{y}"}

            # ----------------------------------------------------------
            # ‚ùå Unknown Type
            # ----------------------------------------------------------
            else:
                return {"ok": False, "message": "unsupported_action_type"}

        except Exception as e:
            # ‡∏î‡∏±‡∏Å error ‡∏ó‡∏∏‡∏Å‡∏ä‡∏ô‡∏¥‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏°
            return {"ok": False, "message": f"executor_exception: {e}"}

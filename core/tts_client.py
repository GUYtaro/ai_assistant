# core/tts_client.py
# -------------------------
# р╕гр╕░р╕Ър╕Ъ Text-to-Speech (TTS)
# тЬЕ р╣Гр╕Кр╣Й pygame р╣Бр╕Чр╕Щ playsound р╣Ар╕Юр╕╖р╣Ир╕нр╕лр╕вр╕╕р╕Фр╣Др╕Фр╣Йр╕Ир╕гр╕┤р╕З
# -------------------------

import pyttsx3
from gtts import gTTS
import tempfile
import os
import re
import threading
import queue

# тЬЕ р╣Гр╕Кр╣Й pygame р╣Бр╕Чр╕Щ playsound
try:
    import pygame
    pygame.mixer.init()
    PYGAME_AVAILABLE = True
except ImportError:
    print("[TTS WARNING] pygame р╣Др╕бр╣Ир╕Юр╕Ъ р╕Бр╕│р╕ер╕▒р╕Зр╣Гр╕Кр╣Й playsound (р╕лр╕вр╕╕р╕Фр╣Др╕бр╣Ир╣Др╕Фр╣Й)")
    from playsound import playsound
    PYGAME_AVAILABLE = False


class TTSClient:
    def __init__(self, lang="th"):
        self.lang = lang
        self.voice_available = False
        self.fallback_enabled = False
        
        # тЬЕ р╣Гр╕Кр╣Й queue р╣Ар╕Юр╕╖р╣Ир╕нр╕Др╕зр╕Ър╕Др╕╕р╕бр╕Бр╕▓р╕гр╕Юр╕╣р╕Ф
        self.speech_queue = queue.Queue()
        self.stop_flag = threading.Event()
        self.speaking_thread = None
        self.is_speaking = False  # тЬЕ р╣Ар╕Юр╕┤р╣Ир╕б flag р╕Хр╕┤р╕Фр╕Хр╕▓р╕б
        
        # р╕кр╕гр╣Йр╕▓р╕З engine
        self._init_engine()
        
        # р╣Ар╕гр╕┤р╣Ир╕б worker thread
        self._start_worker()

    def _init_engine(self):
        """р╕кр╕гр╣Йр╕▓р╕З pyttsx3 engine р╣Гр╕лр╕бр╣И"""
        try:
            self.engine = pyttsx3.init()
            
            # р╕ер╕нр╕Зр╕лр╕▓р╣Ар╕кр╕╡р╕вр╕Зр╕ар╕▓р╕йр╕▓р╣Др╕Чр╕в
            voices = self.engine.getProperty("voices")
            for voice in voices:
                if "th" in voice.languages or "Thai" in voice.name:
                    self.engine.setProperty("voice", voice.id)
                    self.voice_available = True
                    break

            if not self.voice_available:
                print("[TTS] тЪая╕П р╣Др╕бр╣Ир╕Юр╕Ър╣Ар╕кр╕╡р╕вр╕Зр╣Др╕Чр╕в тЖТ р╣Гр╕Кр╣Й Google TTS")
                self.fallback_enabled = True
            else:
                print("[TTS] тЬЕ р╣Гр╕Кр╣Йр╣Ар╕кр╕╡р╕вр╕Зр╣Др╕Чр╕вр╕Вр╕нр╕Зр╕гр╕░р╕Ър╕Ъ")

            self.engine.setProperty("rate", 180)
            self.engine.setProperty("volume", 1.0)
        except Exception as e:
            print(f"[TTS ERROR] р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕гр╣Йр╕▓р╕З engine: {e}")
            self.fallback_enabled = True

    def _start_worker(self):
        """р╣Ар╕гр╕┤р╣Ир╕б worker thread р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Юр╕╣р╕Ф"""
        self.speaking_thread = threading.Thread(
            target=self._speech_worker,
            daemon=True
        )
        self.speaking_thread.start()

    def _speech_worker(self):
        """Worker thread р╕Чр╕╡р╣Ир╕Др╕нр╕вр╕Юр╕╣р╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Ир╕▓р╕Б queue"""
        while True:
            try:
                # р╕гр╕нр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Ир╕▓р╕Б queue
                text = self.speech_queue.get(timeout=0.1)
                
                if text is None:  # р╕кр╕▒р╕Нр╕Нр╕▓р╕Ур╕лр╕вр╕╕р╕Ф worker
                    break
                
                # р╣Ар╕Кр╣Зр╕Др╕зр╣Ир╕▓р╕Цр╕╣р╕Бр╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
                if self.stop_flag.is_set():
                    self.stop_flag.clear()
                    self.is_speaking = False
                    continue
                
                # р╕Хр╕▒р╣Йр╕З flag р╕зр╣Ир╕▓р╕Бр╕│р╕ер╕▒р╕Зр╕Юр╕╣р╕Ф
                self.is_speaking = True
                
                # р╕Юр╕╣р╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
                self._do_speak(text)
                
                # р╣Ар╕кр╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з
                self.is_speaking = False
                
            except queue.Empty:
                continue
            except Exception as e:
                print(f"[TTS ERROR] _speech_worker: {e}")
                self.is_speaking = False

    def _do_speak(self, text: str):
        """р╕Юр╕╣р╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Ир╕гр╕┤р╕Зр╣Ж"""
        try:
            if self.fallback_enabled:
                self._speak_google_pygame(text)
            else:
                # р╣Гр╕Кр╣Й pyttsx3
                self.engine.say(text)
                self.engine.runAndWait()
                
        except Exception as e:
            print(f"[TTS ERROR] _do_speak: {e}")

    def speak(self, text: str):
        """р╕Юр╕╣р╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Фр╣Йр╕зр╕вр╣Ар╕кр╕╡р╕вр╕Зр╣Др╕Чр╕в"""
        if not text or text.strip() == "":
            return
        
        # р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
        cleaned_text = self._clean_text(text)
        
        if not cleaned_text.strip():
            return

        # тЬЕ р╕ер╣Йр╕▓р╕З queue р╣Ар╕Фр╕┤р╕бр╣Бр╕ер╕░р╣Гр╕кр╣Ир╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Гр╕лр╕бр╣И
        try:
            while not self.speech_queue.empty():
                self.speech_queue.get_nowait()
        except:
            pass
        
        # р╣Гр╕кр╣Ир╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Гр╕лр╕бр╣И
        self.speech_queue.put(cleaned_text)
        
        # р╕гр╕╡р╣Ар╕Лр╣Зр╕Х stop flag
        self.stop_flag.clear()

    def stop_speaking(self) -> bool:
        """
        тЬЕ р╕лр╕вр╕╕р╕Фр╕Бр╕▓р╕гр╕Юр╕╣р╕Фр╕Чр╕▒р╕Щр╕Чр╕╡ - р╣Гр╕Кр╣Йр╣Др╕Фр╣Йр╕Ир╕гр╕┤р╕З
        """
        try:
            print("[TTS] ЁЯЫС р╕Бр╕│р╕ер╕▒р╕Зр╕лр╕вр╕╕р╕Фр╕Бр╕▓р╕гр╕Юр╕╣р╕Ф...")
            
            # 1. р╕Хр╕▒р╣Йр╕З flag
            self.stop_flag.set()
            self.is_speaking = False
            
            # 2. р╕ер╣Йр╕▓р╕З queue
            try:
                while not self.speech_queue.empty():
                    self.speech_queue.get_nowait()
            except:
                pass
            
            # 3. р╕лр╕вр╕╕р╕Ф pyttsx3
            try:
                if hasattr(self, 'engine'):
                    self.engine.stop()
            except:
                pass
            
            # 4. тЬЕ р╕лр╕вр╕╕р╕Ф pygame (р╕кр╕│р╕Др╕▒р╕Нр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф!)
            if PYGAME_AVAILABLE:
                try:
                    pygame.mixer.music.stop()
                    pygame.mixer.stop()
                except:
                    pass
            
            print("[TTS] тЬЕ р╕лр╕вр╕╕р╕Фр╕Бр╕▓р╕гр╕Юр╕╣р╕Фр╕кр╕│р╣Ар╕гр╣Зр╕И")
            return True
            
        except Exception as e:
            print(f"[TTS ERROR] stop_speaking: {e}")
            return False

    def _speak_google_pygame(self, text: str):
        """
        тЬЕ р╣Гр╕Кр╣Й Google TTS + pygame (р╕лр╕вр╕╕р╕Фр╣Др╕Фр╣Й!)
        """
        tmp_path = None
        try:
            # р╣Ар╕Кр╣Зр╕Др╕зр╣Ир╕▓р╕Цр╕╣р╕Бр╕лр╕вр╕╕р╕Фр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
            if self.stop_flag.is_set():
                return
            
            # р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕З
            with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp_file:
                tts = gTTS(text=text, lang="th")
                tts.save(tmp_file.name)
                tmp_path = tmp_file.name

            # р╣Ар╕Кр╣Зр╕Др╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕Зр╕Бр╣Ир╕нр╕Щр╣Ар╕ер╣Ир╕Щ
            if self.stop_flag.is_set():
                return
            
            # тЬЕ р╣Гр╕Кр╣Й pygame р╣Бр╕Чр╕Щ playsound
            if PYGAME_AVAILABLE:
                pygame.mixer.music.load(tmp_path)
                pygame.mixer.music.play()
                
                # р╕гр╕нр╕Ир╕Щр╣Ар╕ер╣Ир╕Щр╣Ар╕кр╕гр╣Зр╕И р╕лр╕гр╕╖р╕нр╕Цр╕╣р╕Бр╕лр╕вр╕╕р╕Ф
                while pygame.mixer.music.get_busy():
                    if self.stop_flag.is_set():
                        pygame.mixer.music.stop()
                        break
                    pygame.time.Clock().tick(10)  # р╣Ар╕Кр╣Зр╕Др╕Чр╕╕р╕Б 0.1 р╕зр╕┤р╕Щр╕▓р╕Чр╕╡
            else:
                # fallback р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕бр╕╡ pygame
                playsound(tmp_path)
            
        except Exception as e:
            print(f"[TTS ERROR] Google TTS: {e}")
        finally:
            # р╕ер╕Ър╣Др╕Яр╕ер╣Мр╕Кр╕▒р╣Ир╕зр╕Др╕гр╕▓р╕з
            if tmp_path and os.path.exists(tmp_path):
                try:
                    os.remove(tmp_path)
                except:
                    pass

    def _clean_text(self, text: str) -> str:
        """р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б"""
        # р╕Хр╕▒р╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Гр╕Щр╕зр╕Зр╣Ар╕ер╣Зр╕Ъ
        text = re.sub(r'\([^)]*\)', '', text)
        text = re.sub(r'\[[^\]]*\]', '', text)
        text = re.sub(r'\{[^}]*\}', '', text)
        
        # р╕Хр╕▒р╕Ф emoji
        text = re.sub(r'[ЁЯШКЁЯдЦЁЯУЭтЬЕтЭМЁЯФНЁЯЪАЁЯТбЁЯОдтП╣я╕ПЁЯФ┤тП│ЁЯОпЁЯОиЁЯОнЁЯОкЁЯОмЁЯОоЁЯО▓ЁЯО░ЁЯО│]', '', text)
        text = re.sub(r'[ЁЯСНЁЯСОЁЯСПЁЯСЛЁЯЩПЁЯТкЁЯдЭЁЯдЮЁЯдЯЁЯдШ]', '', text)
        text = re.sub(r'[тЭдя╕ПЁЯТФЁЯТХЁЯТЦЁЯТЧЁЯТЩЁЯТЪЁЯТЫЁЯТЬЁЯЦд]', '', text)
        text = re.sub(r'[тнРЁЯМЯтЬиЁЯТлтЪбЁЯФеЁЯТеЁЯТвЁЯТп]', '', text)
        text = re.sub(r'[тЦ║тЦ╝тЦ▓тЧПтЧЛтЦатЦбтЧЖтЧЗтШЕтШЖтЩктЩл]', '', text)
        
        # р╕Хр╕▒р╕Фр╕Кр╣Ир╕нр╕Зр╕зр╣Ир╕▓р╕Зр╣Ар╕Бр╕┤р╕Щ
        text = re.sub(r'\s+', ' ', text)
        return text.strip()

    def __del__(self):
        """р╕Ыр╕┤р╕Ф worker thread р╣Ар╕бр╕╖р╣Ир╕н object р╕Цр╕╣р╕Бр╕Чр╕│р╕ер╕▓р╕в"""
        try:
            self.speech_queue.put(None)  # р╕кр╕▒р╕Нр╕Нр╕▓р╕Ур╕лр╕вр╕╕р╕Ф worker
            if self.speaking_thread:
                self.speaking_thread.join(timeout=1.0)
        except:
            pass


# тЬЕ Test Mode
if __name__ == "__main__":
    import time
    
    tts = TTSClient(lang="th")
    
    print("\n=== р╕Чр╕Фр╕кр╕нр╕Ъ TTS + pygame Stop ===\n")
    
    # р╕Чр╕Фр╕кр╕нр╕Ъ: р╕Юр╕╣р╕Фр╕вр╕▓р╕зр╣Ж р╣Бр╕ер╣Йр╕зр╕лр╕вр╕╕р╕Фр╕гр╕░р╕лр╕зр╣Ир╕▓р╕Зр╕Юр╕╣р╕Ф
    print("1. р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕лр╕вр╕╕р╕Фр╕гр╕░р╕лр╕зр╣Ир╕▓р╕Зр╕Юр╕╣р╕Ф")
    tts.speak("р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Др╕гр╕▒р╕Ъ р╕Ьр╕бр╣Ар╕Ыр╣Зр╕Щр╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░ р╕Чр╕╡р╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕╕р╕Ур╣Др╕Фр╣Йр╕лр╕ер╕▓р╕Бр╕лр╕ер╕▓р╕вр╕Зр╕▓р╕Щ р╣Др╕бр╣Ир╕зр╣Ир╕▓р╕Ир╕░р╣Ар╕Ыр╣Зр╕Щр╕Бр╕▓р╕гр╣Ар╕Ыр╕┤р╕Фр╣Вр╕Ыр╕гр╣Бр╕Бр╕гр╕б р╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕е р╕лр╕гр╕╖р╕нр╕Бр╕▓р╕гр╕Др╕зр╕Ър╕Др╕╕р╕бр╕Др╕нр╕бр╕Юр╕┤р╕зр╣Ар╕Хр╕нр╕гр╣Мр╕Фр╣Йр╕зр╕вр╣Ар╕кр╕╡р╕вр╕З р╕Ьр╕бр╕Юр╕гр╣Йр╕нр╕бр╣Гр╕лр╣Йр╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕Др╕╕р╕Ур╕Хр╕ер╕нр╕Фр╣Ар╕зр╕ер╕▓")
    
    print("   р╕гр╕н 2 р╕зр╕┤р╕Щр╕▓р╕Чр╕╡ р╣Бр╕ер╣Йр╕зр╕лр╕вр╕╕р╕Ф...")
    time.sleep(2)
    
    success = tts.stop_speaking()
    print(f"   {'тЬЕ' if success else 'тЭМ'} р╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М: {success}")
    print(f"   is_speaking = {tts.is_speaking}")
    
    time.sleep(1)
    
    # р╕Чр╕Фр╕кр╕нр╕Ър╕Юр╕╣р╕Фр╣Гр╕лр╕бр╣Ир╕лр╕ер╕▒р╕Зр╕лр╕вр╕╕р╕Ф
    print("\n2. р╕Чр╕Фр╕кр╕нр╕Ър╕Юр╕╣р╕Фр╣Гр╕лр╕бр╣Ир╕лр╕ер╕▒р╕Зр╕лр╕вр╕╕р╕Ф")
    tts.speak("р╕Чр╕Фр╕кр╕нр╕Ър╕Юр╕╣р╕Фр╣Гр╕лр╕бр╣Ир╕Др╕гр╕▒р╕Ъ р╕гр╕░р╕Ър╕Ър╕Чр╕│р╕Зр╕▓р╕Щр╕Ыр╕Бр╕Хр╕┤")
    
    time.sleep(3)
    
    print("\nтЬЕ р╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ")
# core/tts_client.py
# -------------------------
# ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Text-to-Speech (TTS)
# ‡πÉ‡∏ä‡πâ pyttsx3 ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ Windows
# ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Offline 100% (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï)
#
# ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå:
#   - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÄ‡∏ä‡πà‡∏ô Microsoft Pattara, Narisa)
#   - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏ó‡∏¢ ‚Üí fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (English)
#   - ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß (rate) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏á (volume) ‡πÑ‡∏î‡πâ
#   - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ list ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
#   - ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏ú‡πà‡∏≤‡∏ô method speak(), set_rate(), set_volume(), stop()
#
# ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î:
#   - Windows 10/11 ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏°‡∏±‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
#   - pyttsx3 ‡∏≠‡∏≤‡∏®‡∏±‡∏¢ Windows SAPI ‚Üí ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö voice ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
# -------------------------

import pyttsx3
import logging

# ‡∏õ‡∏¥‡∏î warning ‡∏Ç‡∏≠‡∏á pyttsx3 ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏£‡∏ö‡∏Å‡∏ß‡∏ô console (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡πÅ‡∏ï‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ log ‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
logging.getLogger('pyttsx3.engine').setLevel(logging.WARNING)


class TTSClient:
    """
    ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Text-to-Speech (TTS)
    ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô abstraction layer ‡∏Ñ‡∏£‡∏≠‡∏ö pyttsx3
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ error handling ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    """

    def __init__(self, rate=170, volume=1.0, lang="th"):
        """
        Constructor
        ----------
        rate : int
            ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î (‡∏Ñ‡∏≥‡∏ï‡πà‡∏≠‡∏ô‡∏≤‡∏ó‡∏µ) ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô = 170
        volume : float
            ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á (0.0 ‡∏ñ‡∏∂‡∏á 1.0) ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô = 1.0
        lang : str
            ‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô "th" = ‡πÑ‡∏ó‡∏¢, "en" = ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        """
        print("[TTS] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Offline)...")
        self.engine = None
        try:
            self.engine = pyttsx3.init()  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô engine
            self.engine.setProperty('rate', rate)     # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ speed
            self.engine.setProperty('volume', volume) # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ volume
            
            voices = self.engine.getProperty('voices')  # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ voice ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏ó‡∏¢
            voice = self._get_thai_voice(lang, voices)
            
            if voice:
                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏ó‡∏¢ ‚Üí ‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ô‡∏±‡πâ‡∏ô
                self.engine.setProperty('voice', voice.id)
                print(f"[TTS] ‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢: {voice.name} (ID: {voice.id})")
            elif voices:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏∑‡πà‡∏ô ‚Üí fallback ‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏£‡∏Å
                self.engine.setProperty('voice', voices[0].id)
                print(f"[TTS WARNING] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ó‡∏ô: {voices[0].name}")
                print("üëâ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô Windows Settings > Time & Language > Language & Region > Add a language")
                print("   ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Speech ‡∏î‡πâ‡∏ß‡∏¢")
            else:
                # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏¢
                print("[TTS CRITICAL ERROR] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£")

        except Exception as e:
            # ‡∏ñ‡πâ‡∏≤ pyttsx3 init ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡πÄ‡∏ä‡πà‡∏ô registry ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢, OS ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö)
            print(f"[TTS CRITICAL ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏∞‡∏ö‡∏ö TTS ‡πÑ‡∏î‡πâ: {e}")
            self.engine = None

    def _get_thai_voice(self, lang, voices):
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏à‡∏≤‡∏Å voices ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö ‡πÄ‡∏ä‡πà‡∏ô:
        - voice.languages ‡∏°‡∏µ "th"
        - voice.id ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "thai"
        - voice.name ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "pattara" (Microsoft Pattara)
        
        Returns
        -------
        voice : object | None
            ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏ó‡∏¢ ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ voice object, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö ‚Üí ‡∏Ñ‡∏∑‡∏ô None
        """
        for voice in voices:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å languages (‡∏ö‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ field ‡∏ô‡∏µ‡πâ)
            is_thai_language = False
            if hasattr(voice, 'languages') and voice.languages:
                 is_thai_language = any(lang.lower() in l.lower() for l in voice.languages)
            
            if is_thai_language or lang.lower() in voice.id.lower() or 'pattara' in voice.name.lower():
                return voice
        return None

    def speak(self, text):
        """
        ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î
        ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö Blocking (‡∏£‡∏≠‡∏à‡∏ô‡∏û‡∏π‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à)
        
        Parameters
        ----------
        text : str
            ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î
        """
        if self.engine is None:
            print("[TTS] ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return
        try:
            self.engine.say(text)
            self.engine.runAndWait()
        except Exception as e:
            print(f"[TTS ERROR] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏û‡∏π‡∏î: {e}")

    def set_rate(self, rate: int):
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î (‡∏Ñ‡∏≥‡∏ï‡πà‡∏≠‡∏ô‡∏≤‡∏ó‡∏µ)"""
        if self.engine:
            self.engine.setProperty('rate', rate)

    def set_volume(self, volume: float):
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á (0.0 ‡∏ñ‡∏∂‡∏á 1.0)"""
        if self.engine:
            self.engine.setProperty('volume', volume)

    def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Non-blocking ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô)"""
        if self.engine:
            self.engine.stop()
            
    def list_voices(self):
        """
        ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        
        Returns
        -------
        list of tuple
            [(voice_id, voice_name), ...]
        """
        if self.engine is None:
            return []
        voices = self.engine.getProperty('voices')
        return [(v.id, v.name) for v in voices]

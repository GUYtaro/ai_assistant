# core/command_parser.py
# -------------------------
# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (‡∏à‡∏≤‡∏Å STT ‡∏´‡∏£‡∏∑‡∏≠ text) ‡πÄ‡∏õ‡πá‡∏ô action JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö executor
# ‡πÉ‡∏ä‡πâ Hybrid Mode: Rule-based ‡∏Å‡πà‡∏≠‡∏ô, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡πà‡∏≠‡∏¢‡πÉ‡∏ä‡πâ AI
# -------------------------

import json
import re
from typing import Optional, Tuple, Any, Dict  # üî• ‡πÄ‡∏û‡∏¥‡πà‡∏° Dict ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
from core.llm_client import LLMClient

# üî• AI-powered System Prompt (‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î app ‡πÅ‡∏•‡∏∞ automation)
PARSER_SYSTEM_PROMPT = """
You are an intelligent command parser for a desktop automation assistant (AI-powered).
Your job is to convert user's natural language (Thai or English) into a structured JSON command.
Output must be valid JSON only, following this schema:

{
  "type": "click|type|press|scroll|move|multi|launch",
  "target": {"by": "text|image|coords", "value": "<string or [x,y]>"},
  "app": "<application name>",
  "url": "<https://...>",
  "button": "left|right|middle",
  "content": "<text to type>",
  "keys": ["ctrl","shift","a"],
  "amount": <integer>,
  "confirm": true|false,
  "steps": [ /* list of action objects if multi-step */ ]
}

Rules:
- Always output JSON only (no explanation or text outside the JSON).
- If the command asks to **open / go to / launch / start / ‡πÄ‡∏õ‡∏¥‡∏î / ‡πÑ‡∏õ‡∏ó‡∏µ‡πà / ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ**, use `"type":"launch"`.
- If the thing to open is a **website** (like YouTube, Facebook), add `"url"` and set `"app":"chrome"`.
  Example: "‡πÄ‡∏õ‡∏¥‡∏î YouTube ‡∏ú‡πà‡∏≤‡∏ô Chrome" ‚Üí {"type":"launch","app":"chrome","url":"https://youtube.com"}
- If the thing to open is an **application** (like Notepad, Excel, Discord), use `"app":"notepad"` etc.
- If user command involves typing, clicking, or pressing keys, map to proper type.
- If the command has multiple steps, use `"type":"multi"` with `"steps": []"`.
- If unsure about something, set `"confirm": true`.
- If you cannot understand, output: {"error":"cannot_parse"}
"""

class CommandParser:
    def __init__(self, llm_client: Optional[LLMClient] = None):
        self.llm = llm_client or LLMClient()
        self.hybrid_mode = True  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Hybrid Mode

    def _try_rule_based_parse(self, utterance: str) -> Optional[Dict[str, Any]]:
        """
        üî• Hybrid Mode: ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Rule-based ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏∞‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LLM
        """
        if not self.hybrid_mode:
            return None

        text_lower = utterance.lower().strip()
        
        # 1. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        if "‡∏Ñ‡∏•‡∏¥‡∏Å" in text_lower:
            match = re.search(r'‡∏Ñ‡∏•‡∏¥‡∏Å(‡∏õ‡∏∏‡πà‡∏°)?\s*(.+)', text_lower)
            if match:
                target_text = match.group(2).strip()
                return {
                    "type": "click",
                    "target": {"by": "text", "value": target_text},
                    "button": "left",
                    "method": "rule-based"
                }
        
        # 2. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        if "‡∏û‡∏¥‡∏°‡∏û‡πå" in text_lower:
            match = re.search(r'‡∏û‡∏¥‡∏°‡∏û‡πå(‡∏ß‡πà‡∏≤)?\s*(.+)', text_lower)
            if match:
                content = match.group(2).strip()
                return {
                    "type": "type",
                    "content": content,
                    "method": "rule-based"
                }
        
        # 3. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏±‡∏î
        if "‡∏Å‡∏î" in text_lower:
            if "enter" in text_lower or "‡πÄ‡∏≠‡πá‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå" in text_lower:
                return {
                    "type": "press",
                    "keys": ["enter"],
                    "method": "rule-based"
                }
            elif "ctrl" in text_lower or "‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ó‡∏£‡∏•" in text_lower:
                return {
                    "type": "press", 
                    "keys": ["ctrl"],
                    "method": "rule-based"
                }
            elif "alt" in text_lower or "‡∏≠‡∏±‡∏•‡∏ó‡πå" in text_lower:
                return {
                    "type": "press",
                    "keys": ["alt"],
                    "method": "rule-based"
                }
        
        # 4. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
        if "‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô" in text_lower:
            if "‡∏•‡∏á" in text_lower or "‡∏•‡πà‡∏≤‡∏á" in text_lower:
                return {
                    "type": "scroll",
                    "amount": 200,
                    "method": "rule-based"
                }
            elif "‡∏Ç‡∏∂‡πâ‡∏ô" in text_lower or "‡∏ö‡∏ô" in text_lower:
                return {
                    "type": "scroll", 
                    "amount": -200,
                    "method": "rule-based"
                }
        
        return None  # ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢ rule-based

    def _build_prompt(self, utterance: str, ocr_text: Optional[str]=None, hint_image_data_uri: Optional[str]=None) -> str:
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ LLM
        ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• context ‡πÄ‡∏ä‡πà‡∏ô OCR ‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        """
        ctx = ""
        if ocr_text:
            ctx += f"\nOCR_TEXT:\n{ocr_text}\n"
        if hint_image_data_uri:
            ctx += "\nIMAGE: data_uri included (base64). Use it for locating UI if needed.\n"

        user_msg = f"COMMAND:\n{utterance}\n{ctx}\nReturn JSON action according to schema."
        return user_msg

    def parse(self, utterance: str, ocr_text: Optional[str]=None, hint_image_data_uri: Optional[str]=None) -> Tuple[bool, Any]:
        """
        üî• HYBRID MODE: ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Rule-based ‡∏Å‡πà‡∏≠‡∏ô, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡πà‡∏≠‡∏¢‡πÉ‡∏ä‡πâ AI
        """
        # 1. ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Rule-based ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î)
        rule_based_result = self._try_rule_based_parse(utterance)
        if rule_based_result:
            print(f"‚ö° [Hybrid] ‡πÉ‡∏ä‡πâ Rule-Based ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {utterance}")
            return True, rule_based_result
        
        # 2. ‡∏ñ‡πâ‡∏≤ Rule-based ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‚Üí ‡πÉ‡∏ä‡πâ AI (‡∏ä‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏â‡∏•‡∏≤‡∏î)
        print(f"ü§ñ [Hybrid] ‡πÉ‡∏ä‡πâ AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {utterance}")
        return self._parse_with_ai(utterance, ocr_text, hint_image_data_uri)

    def _parse_with_ai(self, utterance: str, ocr_text: Optional[str]=None, hint_image_data_uri: Optional[str]=None) -> Tuple[bool, Any]:
        """
        ‡πÉ‡∏ä‡πâ AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
        """
        system = PARSER_SYSTEM_PROMPT
        user = self._build_prompt(utterance, ocr_text, hint_image_data_uri)

        history = [
            {"role": "system", "content": system},
            {"role": "user", "content": user}
        ]

        try:
            raw = self.llm.ask(user, history=history)
        except Exception as e:
            return False, {"error": f"llm_error: {e}"}

        # üîç ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JSON ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        json_text = self._extract_json(raw)
        if not json_text:
            return False, {"error": "no_json_in_response", "raw": raw}

        try:
            parsed = json.loads(json_text)
        except Exception as e:
            return False, {"error": f"invalid_json: {e}", "raw": json_text}

        if "type" not in parsed:
            return False, {"error": "missing_type", "parsed": parsed}

        return True, parsed

    def _extract_json(self, text: str) -> Optional[str]:
        """
        ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á JSON block ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏Å‡∏£‡∏ì‡∏µ LLM ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô)
        """
        start = text.find("{")
        if start == -1:
            return None
        depth = 0
        for i in range(start, len(text)):
            if text[i] == "{":
                depth += 1
            elif text[i] == "}":
                depth -= 1
                if depth == 0:
                    return text[start:i+1]
        return None

    def enable_hybrid_mode(self, enabled: bool = True):
        """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Hybrid Mode"""
        self.hybrid_mode = enabled
        print(f"üîß [CommandParser] Hybrid Mode: {'‡πÄ‡∏õ‡∏¥‡∏î' if enabled else '‡∏õ‡∏¥‡∏î'}")
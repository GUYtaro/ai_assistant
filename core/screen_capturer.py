# core/screen_capturer.py
# -------------------------
# ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ + ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
# ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö ScreenReader (OCR) ‡πÅ‡∏•‡∏∞ VisionSystem (LLM Multimodal)
# -------------------------

import io
import base64
import mss
from PIL import Image

def screenshot_pil(region=None, monitor=0, resize_to=None, fmt="PNG"):
    """
    ‡∏ñ‡πà‡∏≤‡∏¢ screenshot ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô PIL.Image
    - region: (left, top, width, height) ‡∏´‡∏£‡∏∑‡∏≠ None -> ‡∏à‡∏±‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    - monitor: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≠ (0 = all monitors, 1 = ‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å, 2+ = ‡∏à‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ)
    - resize_to: (w, h) ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏†‡∏≤‡∏û
    - fmt: "PNG" ‡∏´‡∏£‡∏∑‡∏≠ "JPEG"
    """
    with mss.mss() as sct:
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å monitor
        if monitor == 0:
            mon = sct.monitors[0]   # all monitors
        else:
            mon = sct.monitors[monitor]

        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ region ‡∏Å‡πá‡∏ï‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏±‡πâ‡∏ô
        if region:
            left, top, width, height = region
            mon = {"left": left, "top": top, "width": width, "height": height}

        sct_img = sct.grab(mon)
        img = Image.frombytes("RGB", sct_img.size, sct_img.rgb)

    # resize ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏
    if resize_to:
        img = img.resize(resize_to, Image.LANCZOS)

    return img


def image_to_data_uri(img: Image.Image, fmt="JPEG", quality=80):
    """
    ‡πÅ‡∏õ‡∏•‡∏á PIL.Image ‡πÄ‡∏õ‡πá‡∏ô Data URI (base64)
    - fmt: 'JPEG' ‡∏´‡∏£‡∏∑‡∏≠ 'PNG'
    - quality: ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ JPEG (0-100)
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ -> (data_uri, raw_bytes)
    """
    buf = io.BytesIO()
    if fmt.upper() == "JPEG":
        img.save(buf, format="JPEG", quality=quality, optimize=True)
        mime = "image/jpeg"
    else:
        img.save(buf, format="PNG", optimize=True)
        mime = "image/png"

    raw_bytes = buf.getvalue()
    b64 = base64.b64encode(raw_bytes).decode("ascii")
    data_uri = f"data:{mime};base64,{b64}"
    return data_uri, raw_bytes


def screenshot_data_uri(region=None, monitor=0, resize_to=(1024, 768), fmt="JPEG", quality=80):
    """
    ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ -> ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Data URI + raw bytes
    - resize_to = (1024,768) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î payload ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ LLM
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ -> (data_uri, raw_bytes, PIL.Image)
    """
    img = screenshot_pil(region=region, monitor=monitor, resize_to=resize_to, fmt=fmt)
    data_uri, raw_bytes = image_to_data_uri(img, fmt=fmt, quality=quality)
    return data_uri, raw_bytes, img


# ‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö standalone
if __name__ == "__main__":
    print("üì∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠...")
    img = screenshot_pil()
    print(f"‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û: {img.size}")
    img.show()

    data_uri, raw, _ = screenshot_data_uri()
    print(f"Data URI ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (50 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å): {data_uri[:50]}...")
